#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <math.h>

#include "magma.h"
#include "magma_lapack.h"

#define BLOCK_SIZE 512

/******************************************************************************************
4/25 bsauk
This will be used for best subset selection with dgels as the linear least squares routine.
This method will use a greedy forward approach similiar to the one used by subset.f90.

The point of this is to have a fair comparison between best subset regression with dgels and
with LSQ. 

In this approach, I will solve LLSP varying the number of columns. I will find what the best
first variable is, then add the best second variable and so on repeating until the maximum
variable size.

I will choose to add variables if the sum of squared error is minimized. 

*******************************************************************************************/

__global__ void magmablas_dnrm2_kernel(int m, double *dA, int ldda, double *dxnorm) {
  const int tx = threadIdx.x;
  double *dx = dA+blockIdx.x*ldda;

  __shared__ double sum[BLOCK_SIZE];
  double lsum = 0;
  for(int j=tx; j<m; j+= BLOCK_SIZE) {
    double re = dx[j];
    lsum += re*re;
  }
  sum[tx] = lsum;
  magma_sum_reduce<BLOCK_SIZE>(tx,sum);
  if(tx==0)
    dxnorm[blockIdx.x] = sqrt(sum[0]);

}

void magma_forwrd(int m, int n, double* A, double* B, int max_size) {

  magma_init();
  magma_queue_t queues;
  magma_queue_create(&queues);
  
  int ldda = ((m+31)/32)*32;
  double *dA = NULL;
  double *dB = NULL;
  double *X = (double *)malloc(n*sizeof(double));
  cudaMalloc((void **)&dA, ldda*n*sizeof(double));
  cudaMalloc((void **)&dB, ldda*sizeof(double));
  
  double *dErr = NULL;
  cudaMalloc((void **)&dErr, sizeof(double));

  for(int vars=1; vars<max_size; vars++) {
    for(int col=0; col<n; col++) {
      for(int row=0; row<m; row++) {
	

  magma_dsetmatrix(m, n, A, m, dA, ldda);
  magma_dsetmatrix(m, 1, B, m, dB, ldda);
  int nb = magma_get_dgeqrf_nb(m, n);
  int lwork = (m-n+nb)*(1+nb)+nb;
  int info;

  double *hwork = (double *)malloc(lwork*sizeof(double));

  magma_dgels3_gpu(MagmaNoTrans, m, n, 1, dA, ldda, dB, ldda, hwork, lwork, &info);
  magmablas_dnrm2_kernel(m, dA, ldda, dErr); 
  

}
